import requests
import os
import random
import asyncio
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, KeyboardButton
from flask import Flask, request

load_dotenv()

TOKEN = os.getenv("TOKEN_BOT")
TMDB_API_KEY = os.getenv("TMDB_API_KEY")
TMDB_BASE_URL = "https://api.themoviedb.org/3"
WEBHOOK_URL = "https://moviehelperbot-privacy.onrender.com"

bot = Bot(token=TOKEN)

app = Flask(__name__)
application = ApplicationBuilder().token(TOKEN).build()

GENRES = {
    "üí£ –ë–æ–µ–≤–∏–∫": 28,
    "ü§° –ö–æ–º–µ–¥–∏—è": 35,
    "üé≠ –î—Ä–∞–º–∞": 18,
    "ü™ê –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": 878,
    "üßôüèª‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏": 14,
    "üë´ –ú–µ–ª–æ–¥—Ä–∞–º–∞": 10749,
    "üìñ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π": 36,
    "‚öîÔ∏è –í–æ–µ–Ω–Ω—ã–π": 10752,
    "üî™ –¢—Ä–∏–ª–ª–µ—Ä": 53,
    "üëπ –£–∂–∞—Å—ã": 27,
    "üëæ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º": 16
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üîé –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞"), KeyboardButton("‚ùì –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º"), KeyboardButton("üåü –¢–æ–ø —Ñ–∏–ª—å–º–æ–≤")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä", reply_markup=reply_markup)

async def send_top_movies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"{TMDB_BASE_URL}/movie/top_rated?api_key={TMDB_API_KEY}&language=ru&page=1"
    response = requests.get(url)
    data = response.json()

    if data.get("results"):
        top_movies = data["results"][:10]

        for movie in top_movies:
            title = movie["title"]
            rating = movie.get("vote_average", "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏")
            description = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            poster_path = movie.get("poster_path")
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None

            message = f"üé¨ <b>{title}</b>\n‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/10\n\nüìù {description}"
            if poster_url:
                await update.message.reply_photo(photo=poster_url, caption=message, parse_mode='HTML')
            else:
                await update.message.reply_text(message, parse_mode='HTML')

async def search_movie(update: Update, context: ContextTypes.DEFAULT_TYPE, query):
    url = f'{TMDB_BASE_URL}/search/movie?query={query}&api_key={TMDB_API_KEY}&language=ru'
    response = requests.get(url)
    data = response.json()

    if data.get('results'):
        movie = data['results'][0]
        title = movie['title']
        description = movie.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        rating = movie.get('vote_average', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')
        poster_path = movie.get('poster_path')
        poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None

        message = f"–ù–∞–∑–≤–∞–Ω–∏–µ: üé¨ <b>{title}</b>\n"
        message += f"–û—Ü–µ–Ω–∫–∞: ‚≠ê {rating}/10\n\n"
        message += f"–û–ø–∏—Å–∞–Ω–∏–µ: üìù {description}"

        if poster_url:
            await update.message.reply_photo(photo=poster_url, caption=message, parse_mode='HTML')
        else:
            await update.message.reply_text(message, parse_mode='HTML')
    else:
        await update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

async def send_random_movie(update: Update, context: ContextTypes.DEFAULT_TYPE, genre_id=None):
    page = random.randint(1, 500)
    url = f"{TMDB_BASE_URL}/discover/movie?api_key={TMDB_API_KEY}&language=ru&sort_by=popularity.desc&page={page}"
    if genre_id:
        url += f"&with_genres={genre_id}"
    response = requests.get(url)
    data = response.json()

    if data.get("results"):
        filtred_movie = [movie for movie in data["results"] if movie.get("vote_average", 0) > 4]
        if filtred_movie:
            movie = random.choice(filtred_movie)
            title = movie["title"]
            description = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            rating = movie.get("vote_average", "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏")
            poster_path = movie.get("poster_path")
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None

            message = f"üé¨ <b>{title}</b>\n‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/10\n\nüìù {description}"
            keyboard = [[KeyboardButton("‚ûï –ï—â–µ —Ñ–∏–ª—å–º")], [KeyboardButton("‚ùå –ù–∞–∑–∞–¥")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            if poster_url:
                await update.message.reply_photo(photo=poster_url, caption=message, parse_mode='HTML',
                                                 reply_markup=reply_markup)
            else:
                await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)

async def handle_movie_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–º–∞–Ω–¥—É "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞"
    if text == "üîé –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞":
        context.user_data["awaiting_search"] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
        print("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞.")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞
    elif context.user_data.get("awaiting_search"):
        query = text.strip()
        if query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            print(f"–ò—â–µ–º —Ñ–∏–ª—å–º –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
            await search_movie(update, context, query)
        else:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        context.user_data["awaiting_search"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
        print("–§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω.")

    # –ö–Ω–æ–ø–∫–∞ "–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º"
    elif text == "‚ùì –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º":
        # –ï—Å–ª–∏ –∂–∞–Ω—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω, —Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ
        if "awaiting_genre" not in context.user_data or context.user_data["awaiting_genre"] is False:
            genres_list = list(GENRES.keys())
            genres_list.append("‚ùå –ù–∞–∑–∞–¥")
            keyboard = []
            i = 0
            while i < len(genres_list):
                if i + 1 < len(genres_list):
                    keyboard.append([KeyboardButton(genres_list[i]), KeyboardButton(genres_list[i + 1])])
                    i += 2
                else:
                    keyboard.append([KeyboardButton(genres_list[i])])
                    i += 1
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=reply_markup)
            context.user_data["awaiting_genre"] = True  # –û–∂–∏–¥–∞–µ–º –∂–∞–Ω—Ä –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
        else:
            # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω –∂–∞–Ω—Ä, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
            await send_random_movie(update, context, context.user_data.get("selected_genre"))



    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    elif text == "‚ùå –ù–∞–∑–∞–¥":
        context.user_data["awaiting_genre"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞
        await start(update, context)

    # –ö–Ω–æ–ø–∫–∞ "–¢–æ–ø —Ñ–∏–ª—å–º–æ–≤"
    elif text == "üåü –¢–æ–ø —Ñ–∏–ª—å–º–æ–≤":
        await send_top_movies(update, context)

    elif text == "‚ûï –ï—â–µ —Ñ–∏–ª—å–º":
        genre_id = context.user_data.get("selected_genre")
        if genre_id:
            await send_random_movie(update, context, genre_id)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
    elif context.user_data.get("awaiting_genre"):
        genre_name = text
        genre_id = GENRES.get(genre_name)

        if genre_id:
            context.user_data["awaiting_genre"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∂–∞–Ω—Ä–∞
            context.user_data["selected_genre"] = genre_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä
            await send_random_movie(update, context, genre_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
        else:
            await update.message.reply_text("–ñ–∞–Ω—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

@app.route("/webhook", methods=["POST"])
async def webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, bot)
        await application.process_update(update)
        return "ok"
    except Exception as e:
        print("Webhook error:", e)
        return "error", 500

@app.route("/", methods=["GET"])
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫! ‚úÖ"

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∏ webhook

def setup():
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_movie_search))

async def on_startup():
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook")
    print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

def run():
    setup()
    asyncio.get_event_loop().run_until_complete(on_startup())
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

run()
